name: Build and deploy to CloudFront

concurrency:
  group: ${{ github.event.repository.name }}-build-n-deploy-${{ github.event.pull_request.number }}
  cancel-in-progress: true

on:
  workflow_call:
    inputs:
      # =====
      # Setup
      # =====
      instance_type:
        type: string
        default: xlarge
        required: false
      node_version:
        type: string
        # If set to '' version will be extracted from .nvmrc file
        default: "16"
        required: false
      node_options:
        type: string
        required: false
      package_manager:
        type: string
        default: yarn
        required: false
      # =====
      # Build
      # =====
      build_command:
        type: string
        default: yarn build
        required: false
      build_cache_path:
        type: string
        required: false
      build_path:
        type: string
        default: ./dist
        required: false
      # ===========
      # Source maps
      # ===========
      upload_source_maps:
        type: boolean
        default: false
        required: false
      sentry_org:
        type: string
        default: restream-io
        required: false
      sentry_project:
        type: string
        default: __project_name__
        required: false
      datadog_release_version:
        type: string
        default: "1.0.0"
        required: false
      # ======
      # Deploy
      # ======
      s3_bucket_name:
        type: string
        required: true
      invalidate_cloudfront_cache:
        type: boolean
        default: true
        required: false
    secrets:
      sentry_auth_token:
        required: false
      datadog_api_key:
        required: false

jobs:
  build:
    name: Build and deploy to CloudFront
    runs-on: ["self-hosted", "${{ inputs.instance_type }}", "prod"]
    steps:
      # To make debugging easier in case of issues
      - name: Show context
        env:
          GITHUB_CONTEXT_JSON: ${{ toJson(github) }}
          INPUTS_JSON: ${{ toJson(inputs) }}
        run: |
          echo Github context: "$GITHUB_CONTEXT_JSON"
          echo Inputs: "$INPUTS_JSON"
      - name: Checkout source code
        uses: actions/checkout@v3
        timeout-minutes: 1

      - name: Setup Node
        uses: actions/setup-node@v3
        timeout-minutes: 5
        with:
          node-version: ${{ inputs.node_version }}
          node-version-file: .nvmrc
          cache: ${{ inputs.package_manager }}
      
      - name: Get package info
        id: package_info
        run: |
          content=`cat ./package.json`
          content="${content//'%'/'%25'}"
          content="${content//$'\n'/'%0A'}"
          content="${content//$'\r'/'%0D'}"
          echo "packageJson=$(content)" >> $GITHUB_OUTPUT

      - run: |
          echo "${{ fromJson(steps.package_info.outputs.packageJson).version }}"


      - name: Install dependencies
        run: ${{ (inputs.package_manager == 'yarn') && 'npm install -g yarn && yarn install --frozen-lockfile' || 'npm ci' }}
        timeout-minutes: 10

      - name: Cache build
        if: inputs.build_cache_path
        timeout-minutes: 5
        uses: actions/cache@v3
        with:
          path: ${{ inputs.build_cache_path }}
          key: build-cache-${{ (inputs.package_manager == 'yarn') && hashFiles('yarn.lock') || hashFiles('package-lock.json') }}-${{ github.ref }}
          restore-keys: |
            build-cache-${{ (inputs.package_manager == 'yarn') && hashFiles('yarn.lock') || hashFiles('package-lock.json') }}
            build-cache-

      - name: Build
        run: ${{ inputs.build_command }}
        timeout-minutes: 15
        env:
          COMMIT_HASH: ${{ github.sha }}
          NODE_OPTIONS: ${{ inputs.node_options }}

      - name: Upload source maps to Sentry
        if: inputs.upload_source_maps
        uses: getsentry/action-release@v1.2.0
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.sentry_auth_token }}
          SENTRY_ORG: ${{ inputs.sentry_org }}
          SENTRY_PROJECT: ${{ inputs.sentry_project }}
        timeout-minutes: 5
        with:
          environment: ${{ (github.ref == 'refs/heads/master') && 'production' || 'staging' }}
          # We do not use Github integration, hence it will always fail
          set_commits: skip
          version: ${{ fromJson(steps.package_info.outputs.packageJson).version }}

      - name: Upload source maps to DataDog
        if: inputs.upload_source_maps
        run: npx @datadog/datadog-ci sourcemaps upload ${{ inputs.build_path }} --service=${{ github.event.repository.name }} --release-version=${{ inputs.datadog_release_version }} --minified-path-prefix=/
        timeout-minutes: 5
        env:
          DATADOG_API_KEY: ${{ secrets.datadog_api_key }}

      - name: Deploy to CloudFront
        if: github.ref == 'refs/heads/master'
        timeout-minutes: 15
        run: |
          cd ${{ inputs.build_path }}
          aws s3 cp . "s3://${{ inputs.s3_bucket_name }}" --recursive --no-progress --exclude "*.js.map"

      - name: Invalidate CloudFront cache
        if: ${{ (inputs.invalidate_cloudfront_cache) && (github.ref == 'refs/heads/master') }}
        timeout-minutes: 5
        env:
          ORIGIN: ${{ inputs.s3_bucket_name }}.s3.amazonaws.com
        run: |
          echo "DISTRIBUTIONS=$(aws cloudfront list-distributions \
            --query "DistributionList.Items[*].{id:Id,origin:Origins.Items[0].Id}[?origin=='${{ env.ORIGIN }}'].id" \
            --output text \
          )" >> $GITHUB_ENV

          for id in $DISTRIBUTIONS; do
            aws cloudfront create-invalidation --distribution-id $id --paths "/*"
          done
