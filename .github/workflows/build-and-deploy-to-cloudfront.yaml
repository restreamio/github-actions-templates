name: Build and Deploy to Cloudfront
on:
  workflow_call:
    inputs:
      build_instance_type:
        type: string
        default: "xlarge"
        required: false
      s3_bucket_name:
        type: string
        required: true
      node_version:
        type: string
        # Will use info from .nvmrc if set to ''
        default: "16"
        required: false
      build_command:
        type: string
        default: "yarn build"
        required: false
      install_dependencies_command:
        type: string
        default: "yarn install --frozen-lockfile"
        required: false
      cache_lock_file:
        type: string
        default: "**/yarn.lock"
        required: false
      send_source_map:
        type: boolean
        default: false
        required: false
      release_dir:
        type: string
        default: "./dist"
        required: false
      invalidate_cloudfront_cache:
        type: boolean
        default: true
        required: false
      datadog_release_version:
        type: string
        default: "1.0.0"
        required: false
      sentry_release_version:
        type: string
        default: "1.0.0"
        required: false
      sentry_org_slug:
        type: string
        default: "restream-io"
        required: false
      sentry_project_slug:
        type: string
        default: ""
        required: false
      build_with:
        type: string
        default: "yarn"
        required: false
      node_options:
        type: string
        required: false
    secrets:
      sentry_credentials:
        required: false
      datadog_api_key:
        required: false

jobs:
  build:
    name: Build and upload to cloudfront
    runs-on: ["self-hosted", "${{ inputs.build_instance_type }}", "prod"]
    steps:
      - name: Checkout source code
        uses: actions/checkout@v3
        timeout-minutes: 1

      - name: Setup NodeJs and npm
        uses: actions/setup-node@v3
        timeout-minutes: 5
        with:
          node-version: ${{ inputs.node_version }}
          node-version-file: '.nvmrc'
          cache: ${{ inputs.build_with }}

      - name: Setup yarn
        run: npm install -g yarn
        timeout-minutes: 5
        if: inputs.build_with == 'yarn'

      - name: Get commit details
        id: github-commit-details
        run: |
          echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          echo "date=$(date +'%y.%m.%d%H%M')" >> $GITHUB_OUTPUT
          echo "branch=$(echo ${{ github.head_ref }} | sed -e 's/\//_/g' -e 's/-/_/g' -e 's/./\L&/g')" >> $GITHUB_OUTPUT
          echo "contributor=$(git log -1 --pretty=format:'%an' |  tr -d '\n')" >> $GITHUB_OUTPUT
          echo "long_commit=$(git log -n 1 --pretty=format:'%H') >> $GITHUB_OUTPUT"
          echo "commit_hash=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
          echo "sentry_release_version=$(echo ${{ inputs.sentry_release_version }})" >> $GITHUB_OUTPUT
          echo "datadog_release_version=$(echo ${{ inputs.sentry_release_version }})" >> $GITHUB_OUTPUT
        timeout-minutes: 1

      - name: Get YARN cache directory path
        id: yarn-cache-dir-path
        run: echo "dir=$(yarn cache dir)" >> $GITHUB_OUTPUT
        timeout-minutes: 1
        if: inputs.build_with == 'yarn'

      - name: Get NPM cache directory path
        id: npm-cache-dir-path
        run: echo "dir=$(npm get cache)" >> $GITHUB_OUTPUT
        timeout-minutes: 1
        if: inputs.build_with == 'npm'

      - name: Restore node_modules cache for YARN
        uses: actions/cache@v3
        id: yarn-cache
        timeout-minutes: 10
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ github.event.repository.name }}-yarn-${{ hashFiles( inputs.cache_lock_file ) }}
          restore-keys: |
            ${{ github.event.repository.name }}-yarn-
        if: inputs.build_with == 'yarn'

      - name: Restore node_modules cache for NPM
        uses: actions/cache@v3
        id: npm-cache
        timeout-minutes: 10
        with:
          path: ${{ steps.npm-cache-dir-path.outputs.dir }}
          key: ${{ github.event.repository.name }}-npm-${{ hashFiles( inputs.cache_lock_file ) }}
          restore-keys: |
            ${{ github.event.repository.name }}-npm-
        if: inputs.build_with == 'npm'

      - name: Install dependencies
        run: ${{ inputs.install_dependencies_command }}
        timeout-minutes: 10

      - name: Build source code
        run: ${{ inputs.build_command }}
        timeout-minutes: 15
        env:
          COMMIT_HASH: ${{ steps.github-commit-details.outputs.commit_hash }}
          NODE_OPTIONS: ${{ inputs.node_options }}

      - name: Sentry Release
        uses: getsentry/action-release@v1.2.0
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.sentry_credentials }}
          SENTRY_ORG: ${{ inputs.sentry_org_slug }}
          SENTRY_PROJECT: ${{ inputs.sentry_project_slug }}
        timeout-minutes: 15
        with:
          environment: ${{ (github.ref == 'refs/heads/master') && 'production' || 'staging' }}
          # We do not use Github integration, hence it will always fail
          set_commits: 'skip'
          version: ${{ inputs.sentry_release_version }}
        if: inputs.send_source_map

      - name: Upload to Datadog and remove sourcemaps (old version)
        run: |
          npm run datadog-ci -- sourcemaps upload ${{ inputs.release_dir }} --service=\"${{ github.event.repository.name }}\" --release-version=${{ inputs.datadog_release_version }} --minified-path-prefix=/
          npm run remove-sourcemaps
        timeout-minutes: 15
        env:
          DATADOG_API_KEY: ${{ secrets.datadog_api_key }}
        if: inputs.send_source_map

      - name: Deploy CloudFront
        if: github.ref == 'refs/heads/master'
        timeout-minutes: 15
        run: |
          cd ${{ inputs.release_dir }}
          aws s3 cp . "s3://${{ inputs.s3_bucket_name }}" --recursive --no-progress

      - name: Invalidation Cloudfront cache
        if: ${{ (inputs.invalidate_cloudfront_cache) && (github.ref == 'refs/heads/master') }}
        timeout-minutes: 5
        env:
          ORIGIN: ${{ inputs.s3_bucket_name }}.s3.amazonaws.com
        run: |
          echo "DISTRIBUTIONS=$(aws cloudfront list-distributions \
            --query "DistributionList.Items[*].{id:Id,origin:Origins.Items[0].Id}[?origin=='${{ env.ORIGIN }}'].id" \
            --output text \
          )" >> $GITHUB_ENV

          for id in $DISTRIBUTIONS; do
            aws cloudfront create-invalidation --distribution-id $id --paths "/*"
          done
