name: Clean Actions Caches
description: Clean up to 100 Actions caches

inputs:
  ref:
    description: The branch or reference for the caches.
    required: true
  per_page:
    description: Number of caches to fetch per page.
    required: false
    default: "100"
  page:
    description: The page number to fetch.
    required: false
    default: "1"
  sort:
    description: Sorting criterion for the caches.
    required: false
    default: last_accessed_at
  direction:
    description: Sorting direction (asc or desc).
    required: false
    default: desc
  github_token:
    description: The GitHub token for API requests.
    required: true

runs:
  using: "composite"
  steps:
  - name: Clean caches
    shell: bash
    run: |
      python3 -c '
      import json
      import urllib.request
      import urllib.parse
      import os
      
      def make_request(url, method="GET", data=None, headers=None):
          if headers is None:
              headers = {}
      
          default_headers = {
              "Accept": "application/vnd.github+json",
              "Authorization": "Bearer ${{ inputs.github_token }}",
              "X-GitHub-Api-Version": "2022-11-28"
          }
          headers = {**default_headers, **headers}
      
          try:
              if data:
                  data = json.dumps(data).encode("utf-8")
      
              req = urllib.request.Request(url, data=data, headers=headers, method=method)
              with urllib.request.urlopen(req) as response:
                  if method == "GET":
                      return json.loads(response.read().decode("utf-8"))
                  return True
          except urllib.error.HTTPError as e:
              print(f"HTTP Error: {e.code} - {e.reason}")
              print(e.read().decode("utf-8"))
              raise
      
      def get_branch_caches(owner, repo, ref, page, per_page, sort, direction):
          params = {
              "ref": ref,
              "per_page": per_page,
              "page": page,
              "sort": sort,
              "direction": direction
          }
          query_string = urllib.parse.urlencode(params)
          url = f"https://api.github.com/repos/{owner}/{repo}/actions/caches?{query_string}"
          return make_request(url)
      
      def delete_cache(owner, repo, cache_id):
          url = f"https://api.github.com/repos/{owner}/{repo}/actions/caches/{cache_id}"
          return make_request(url, method="DELETE")
      
      # get env vars
      github_repository = os.environ["GITHUB_REPOSITORY"]
      owner, repo = github_repository.split("/")
      
      ref = "${{ inputs.ref }}"
      per_page = int("${{ inputs.per_page }}")
      page = int("${{ inputs.page }}")
      sort = "${{ inputs.sort }}"
      direction = "${{ inputs.direction }}"
      
      print(f"Cleaning caches for ref: {ref}")
      
      # get caches for the branch
      response = get_branch_caches(owner, repo, ref, page, per_page, sort, direction)
      caches = response.get("actions_caches", [])
      
      print(f"Found {len(caches)} caches")
      
      # delete up to 100 caches
      deleted_count = 0
      for cache in caches[:100]:
          cache_id = cache["id"]
          print(f"Deleting cache: {cache_id}")
          try:
              if delete_cache(owner, repo, cache_id):
                  print(f"Successfully deleted cache: {cache_id}")
                  deleted_count += 1
          except Exception as e:
              print(f"Failed to delete cache {cache_id}: {str(e)}")
      '
